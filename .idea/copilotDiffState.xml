<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Services/Client/docker-compose.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Services/Client/docker-compose.yml" />
              <option name="updatedContent" value="version: '3.8'&#10;services:&#10;  db:&#10;    image: postgres:15&#10;    container_name: pg-client&#10;    environment:&#10;      POSTGRES_USER: client_user&#10;      POSTGRES_PASSWORD: strongpassword&#10;      POSTGRES_DB: clientdb&#10;    ports:&#10;      - &quot;5432:5432&quot;&#10;    volumes:&#10;      - pgdata:/var/lib/postgresql/data&#10;    restart: unless-stopped&#10;&#10;  pgadmin:&#10;    image: dpage/pgadmin4&#10;    container_name: pgadmin&#10;    environment:&#10;      PGADMIN_DEFAULT_EMAIL: admin@local&#10;      PGADMIN_DEFAULT_PASSWORD: admin&#10;    ports:&#10;      - &quot;5050:80&quot;&#10;    restart: unless-stopped&#10;&#10;volumes:&#10;  pgdata:&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Services/Client/pom.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Services/Client/pom.xml" />
              <option name="updatedContent" value="&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;&#9;xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;&#9;&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;&#10;&#9;&lt;groupId&gt;com.martian&lt;/groupId&gt;&#10;&#9;&lt;artifactId&gt;client-ms&lt;/artifactId&gt;&#10;&#9;&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&#10;&#9;&lt;packaging&gt;jar&lt;/packaging&gt;&#10;&#10;&#9;&lt;name&gt;client-ms&lt;/name&gt;&#10;&#9;&lt;description&gt;Client Management microservice&lt;/description&gt;&#10;&#10;&#9;&lt;parent&gt;&#10;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;&#10;&#9;&#9;&lt;version&gt;3.1.4&lt;/version&gt;&#10;&#9;&#9;&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;&#10;&#9;&lt;/parent&gt;&#10;&#10;&#9;&lt;properties&gt;&#10;&#9;&#9;&lt;java.version&gt;17&lt;/java.version&gt;&#10;&#9;&lt;/properties&gt;&#10;&#10;&#9;&lt;dependencies&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.postgresql&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;postgresql&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;scope&gt;runtime&lt;/scope&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.security&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-security-crypto&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;scope&gt;test&lt;/scope&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&lt;/dependencies&gt;&#10;&#10;&#9;&lt;build&gt;&#10;&#9;&#9;&lt;plugins&gt;&#10;&#9;&#9;&#9;&lt;plugin&gt;&#10;&#9;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&#9;&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;/plugin&gt;&#10;&#9;&#9;&lt;/plugins&gt;&#10;&#9;&lt;/build&gt;&#10;&#10;&lt;/project&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Services/Client/src/main/java/com/martian/clientms/ClientMsApplication.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Services/Client/src/main/java/com/martian/clientms/ClientMsApplication.java" />
              <option name="updatedContent" value="package com.martian.clientms;&#10;&#10;import org.springframework.boot.SpringApplication;&#10;import org.springframework.boot.autoconfigure.SpringBootApplication;&#10;&#10;@SpringBootApplication&#10;public class ClientMsApplication {&#10;    public static void main(String[] args) {&#10;        SpringApplication.run(ClientMsApplication.class, args);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Services/Client/src/main/java/com/martian/clientms/config/DatabaseConnectionChecker.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Services/Client/src/main/java/com/martian/clientms/config/DatabaseConnectionChecker.java" />
              <option name="updatedContent" value="package com.martian.clientms.config;&#10;&#10;import org.slf4j.Logger;&#10;import org.slf4j.LoggerFactory;&#10;import org.springframework.boot.context.event.ApplicationReadyEvent;&#10;import org.springframework.context.event.EventListener;&#10;import org.springframework.stereotype.Component;&#10;&#10;import javax.sql.DataSource;&#10;import java.sql.Connection;&#10;&#10;@Component&#10;public class DatabaseConnectionChecker {&#10;&#10;    private final DataSource dataSource;&#10;    private final Logger logger = LoggerFactory.getLogger(DatabaseConnectionChecker.class);&#10;&#10;    public DatabaseConnectionChecker(DataSource dataSource) {&#10;        this.dataSource = dataSource;&#10;    }&#10;&#10;    @EventListener(ApplicationReadyEvent.class)&#10;    public void checkConnection() {&#10;        try (Connection conn = dataSource.getConnection()) {&#10;            if (conn != null &amp;&amp; !conn.isClosed()) {&#10;                String url = conn.getMetaData().getURL();&#10;                logger.info(&quot;Successfully connected to the database: {}&quot;, url);&#10;            } else {&#10;                logger.error(&quot;Database connection is null or closed after startup&quot;);&#10;            }&#10;        } catch (Exception ex) {&#10;            logger.error(&quot;Failed to connect to the database on startup: {}&quot;, ex.getMessage(), ex);&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Services/Client/src/main/java/com/martian/clientms/config/SecurityConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Services/Client/src/main/java/com/martian/clientms/config/SecurityConfig.java" />
              <option name="updatedContent" value="package com.martian.clientms.config;&#10;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;&#10;&#10;@Configuration&#10;public class SecurityConfig {&#10;&#10;    @Bean&#10;    public BCryptPasswordEncoder passwordEncoder() {&#10;        return new BCryptPasswordEncoder();&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Services/Client/src/main/java/com/martian/clientms/controller/ClientController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Services/Client/src/main/java/com/martian/clientms/controller/ClientController.java" />
              <option name="updatedContent" value="package com.martian.clientms.controller;&#10;&#10;import com.martian.clientms.dto.LoginRequest;&#10;import com.martian.clientms.dto.RegisterRequest;&#10;import com.martian.clientms.entity.Client;&#10;import com.martian.clientms.service.ClientService;&#10;import jakarta.validation.Valid;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.validation.annotation.Validated;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.List;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/clients&quot;)&#10;@Validated&#10;public class ClientController {&#10;&#10;    private final ClientService clientService;&#10;&#10;    @Autowired&#10;    public ClientController(ClientService clientService) {&#10;        this.clientService = clientService;&#10;    }&#10;&#10;    @PostMapping(&quot;/register&quot;)&#10;    public ResponseEntity&lt;Client&gt; register(@Valid @RequestBody RegisterRequest req) {&#10;        Client created = clientService.register(req);&#10;        created.setPassword(null);&#10;        return ResponseEntity.ok(created);&#10;    }&#10;&#10;    @PostMapping(&quot;/login&quot;)&#10;    public ResponseEntity&lt;Client&gt; login(@Valid @RequestBody LoginRequest req) {&#10;        Client c = clientService.login(req);&#10;        c.setPassword(null);&#10;        return ResponseEntity.ok(c);&#10;    }&#10;&#10;    @GetMapping&#10;    public ResponseEntity&lt;List&lt;Client&gt;&gt; getAll() {&#10;        List&lt;Client&gt; list = clientService.getAll();&#10;        list.forEach(c -&gt; c.setPassword(null));&#10;        return ResponseEntity.ok(list);&#10;    }&#10;&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Client&gt; getById(@PathVariable Long id) {&#10;        Client c = clientService.getById(id);&#10;        c.setPassword(null);&#10;        return ResponseEntity.ok(c);&#10;    }&#10;&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Client&gt; update(@PathVariable Long id, @RequestBody Client update) {&#10;        Client c = clientService.update(id, update);&#10;        c.setPassword(null);&#10;        return ResponseEntity.ok(c);&#10;    }&#10;&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Void&gt; delete(@PathVariable Long id) {&#10;        clientService.delete(id);&#10;        return ResponseEntity.noContent().build();&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Services/Client/src/main/java/com/martian/clientms/dto/LoginRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Services/Client/src/main/java/com/martian/clientms/dto/LoginRequest.java" />
              <option name="updatedContent" value="package com.martian.clientms.dto;&#10;&#10;import jakarta.validation.constraints.Email;&#10;import jakarta.validation.constraints.NotBlank;&#10;&#10;public class LoginRequest {&#10;    @Email&#10;    @NotBlank&#10;    private String email;&#10;&#10;    @NotBlank&#10;    private String password;&#10;&#10;    public String getEmail() { return email; }&#10;    public void setEmail(String email) { this.email = email; }&#10;    public String getPassword() { return password; }&#10;    public void setPassword(String password) { this.password = password; }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Services/Client/src/main/java/com/martian/clientms/dto/RegisterRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Services/Client/src/main/java/com/martian/clientms/dto/RegisterRequest.java" />
              <option name="updatedContent" value="package com.martian.clientms.dto;&#10;&#10;import jakarta.validation.constraints.Email;&#10;import jakarta.validation.constraints.NotBlank;&#10;&#10;public class RegisterRequest {&#10;&#10;    @NotBlank&#10;    private String name;&#10;&#10;    @Email&#10;    @NotBlank&#10;    private String email;&#10;&#10;    @NotBlank&#10;    private String password;&#10;&#10;    private String phone;&#10;    private String address;&#10;&#10;    // getters and setters&#10;    public String getName() { return name; }&#10;    public void setName(String name) { this.name = name; }&#10;    public String getEmail() { return email; }&#10;    public void setEmail(String email) { this.email = email; }&#10;    public String getPassword() { return password; }&#10;    public void setPassword(String password) { this.password = password; }&#10;    public String getPhone() { return phone; }&#10;    public void setPhone(String phone) { this.phone = phone; }&#10;    public String getAddress() { return address; }&#10;    public void setAddress(String address) { this.address = address; }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Services/Client/src/main/java/com/martian/clientms/entity/Client.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Services/Client/src/main/java/com/martian/clientms/entity/Client.java" />
              <option name="updatedContent" value="package com.martian.clientms.entity;&#10;&#10;import jakarta.persistence.*;&#10;import jakarta.validation.constraints.Email;&#10;import jakarta.validation.constraints.NotBlank;&#10;&#10;@Entity&#10;@Table(name = &quot;clients&quot;, uniqueConstraints = {@UniqueConstraint(columnNames = &quot;email&quot;)})&#10;public class Client {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @NotBlank&#10;    private String name;&#10;&#10;    @Email&#10;    @NotBlank&#10;    private String email;&#10;&#10;    @NotBlank&#10;    private String password; // stored hashed&#10;&#10;    private String phone;&#10;    private String address;&#10;&#10;    // getters and setters&#10;&#10;    public Long getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(Long id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getName() {&#10;        return name;&#10;    }&#10;&#10;    public void setName(String name) {&#10;        this.name = name;&#10;    }&#10;&#10;    public String getEmail() {&#10;        return email;&#10;    }&#10;&#10;    public void setEmail(String email) {&#10;        this.email = email;&#10;    }&#10;&#10;    public String getPassword() {&#10;        return password;&#10;    }&#10;&#10;    public void setPassword(String password) {&#10;        this.password = password;&#10;    }&#10;&#10;    public String getPhone() {&#10;        return phone;&#10;    }&#10;&#10;    public void setPhone(String phone) {&#10;        this.phone = phone;&#10;    }&#10;&#10;    public String getAddress() {&#10;        return address;&#10;    }&#10;&#10;    public void setAddress(String address) {&#10;        this.address = address;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Services/Client/src/main/java/com/martian/clientms/repository/ClientRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Services/Client/src/main/java/com/martian/clientms/repository/ClientRepository.java" />
              <option name="updatedContent" value="package com.martian.clientms.repository;&#10;&#10;import com.martian.clientms.entity.Client;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.util.Optional;&#10;&#10;@Repository&#10;public interface ClientRepository extends JpaRepository&lt;Client, Long&gt; {&#10;    Optional&lt;Client&gt; findByEmail(String email);&#10;    boolean existsByEmail(String email);&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Services/Client/src/main/java/com/martian/clientms/service/ClientService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Services/Client/src/main/java/com/martian/clientms/service/ClientService.java" />
              <option name="updatedContent" value="package com.martian.clientms.service;&#10;&#10;import com.martian.clientms.dto.LoginRequest;&#10;import com.martian.clientms.dto.RegisterRequest;&#10;import com.martian.clientms.entity.Client;&#10;import com.martian.clientms.repository.ClientRepository;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;@Service&#10;public class ClientService {&#10;&#10;    private final ClientRepository clientRepository;&#10;    private final BCryptPasswordEncoder passwordEncoder;&#10;&#10;    @Autowired&#10;    public ClientService(ClientRepository clientRepository, BCryptPasswordEncoder passwordEncoder) {&#10;        this.clientRepository = clientRepository;&#10;        this.passwordEncoder = passwordEncoder;&#10;    }&#10;&#10;    public Client register(RegisterRequest req) {&#10;        if (clientRepository.existsByEmail(req.getEmail())) {&#10;            throw new IllegalArgumentException(&quot;Email already in use&quot;);&#10;        }&#10;        Client c = new Client();&#10;        c.setName(req.getName());&#10;        c.setEmail(req.getEmail());&#10;        c.setPassword(passwordEncoder.encode(req.getPassword()));&#10;        c.setPhone(req.getPhone());&#10;        c.setAddress(req.getAddress());&#10;        return clientRepository.save(c);&#10;    }&#10;&#10;    public Client login(LoginRequest req) {&#10;        Optional&lt;Client&gt; oc = clientRepository.findByEmail(req.getEmail());&#10;        if (oc.isEmpty()) throw new IllegalArgumentException(&quot;Invalid credentials&quot;);&#10;        Client c = oc.get();&#10;        if (!passwordEncoder.matches(req.getPassword(), c.getPassword())) {&#10;            throw new IllegalArgumentException(&quot;Invalid credentials&quot;);&#10;        }&#10;        return c; // in real app return token&#10;    }&#10;&#10;    public Client getById(Long id) {&#10;        return clientRepository.findById(id).orElseThrow(() -&gt; new IllegalArgumentException(&quot;Client not found&quot;));&#10;    }&#10;&#10;    public List&lt;Client&gt; getAll() {&#10;        return clientRepository.findAll();&#10;    }&#10;&#10;    public Client update(Long id, Client update) {&#10;        Client existing = getById(id);&#10;        if (update.getName() != null) existing.setName(update.getName());&#10;        if (update.getEmail() != null &amp;&amp; !update.getEmail().equals(existing.getEmail())) {&#10;            if (clientRepository.existsByEmail(update.getEmail())) {&#10;                throw new IllegalArgumentException(&quot;Email already in use&quot;);&#10;            }&#10;            existing.setEmail(update.getEmail());&#10;        }&#10;        if (update.getPassword() != null &amp;&amp; !update.getPassword().isEmpty()) {&#10;            existing.setPassword(passwordEncoder.encode(update.getPassword()));&#10;        }&#10;        if (update.getPhone() != null) existing.setPhone(update.getPhone());&#10;        if (update.getAddress() != null) existing.setAddress(update.getAddress());&#10;        return clientRepository.save(existing);&#10;    }&#10;&#10;    public void delete(Long id) {&#10;        clientRepository.deleteById(id);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Services/Client/src/main/resources/application.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Services/Client/src/main/resources/application.properties" />
              <option name="originalContent" value="# PostgreSQL datasource - update values as needed&#10;spring.datasource.url=jdbc:postgresql://localhost:5432/clientdb&#10;spring.datasource.username=postgres&#10;spring.datasource.password=root&#10;spring.jpa.hibernate.ddl-auto=update&#10;spring.jpa.show-sql=true&#10;&#10;# Server port (optional)&#10;server.port=8081&#10;&#10;" />
              <option name="updatedContent" value="# PostgreSQL datasource - update values as needed&#10;spring.datasource.url=jdbc:postgresql://localhost:5432/clientdb&#10;spring.jpa.hibernate.ddl-auto=update&#10;spring.jpa.show-sql=true&#10;&#10;# Server port (optional)&#10;server.port=8081" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>