<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Services/Client/src/main/java/com/martian/clientms/dto/RegisterRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Services/Client/src/main/java/com/martian/clientms/dto/RegisterRequest.java" />
              <option name="originalContent" value="package com.martian.clientms.dto;&#10;&#10;import jakarta.validation.constraints.Email;&#10;import jakarta.validation.constraints.NotBlank;&#10;&#10;public class RegisterRequest {&#10;&#10;    @NotBlank&#10;    private String username;&#10;&#10;    @Email&#10;    @NotBlank&#10;    private String email;&#10;&#10;    @NotBlank&#10;    private String password;&#10;&#10;    // getters and setters&#10;    public String getUsername() { return username; }&#10;    public void setUsername(String username) { this.username = username; }&#10;    public String getEmail() { return email; }&#10;    public void setEmail(String email) { this.email = email; }&#10;    public String getPassword() { return password; }&#10;    public void setPassword(String password) { this.password = password; }&#10;&#10;&#10;&#10;&#10;" />
              <option name="updatedContent" value="package com.martian.clientms.dto;&#10;&#10;import jakarta.validation.constraints.Email;&#10;import jakarta.validation.constraints.NotBlank;&#10;&#10;public class RegisterRequest {&#10;&#10;    @NotBlank&#10;    private String username;&#10;&#10;    @Email&#10;    @NotBlank&#10;    private String email;&#10;&#10;    @NotBlank&#10;    private String password;&#10;&#10;    // getters and setters&#10;    public String getUsername() { return username; }&#10;    public void setUsername(String username) { this.username = username; }&#10;    public String getEmail() { return email; }&#10;    public void setEmail(String email) { this.email = email; }&#10;    public String getPassword() { return password; }&#10;    public void setPassword(String password) { this.password = password; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Services/Client/src/main/java/com/martian/clientms/entity/Client.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Services/Client/src/main/java/com/martian/clientms/entity/Client.java" />
              <option name="originalContent" value="package com.martian.clientms.entity;&#10;&#10;import jakarta.persistence.*;&#10;import jakarta.validation.constraints.Email;&#10;import jakarta.validation.constraints.NotBlank;&#10;&#10;@Entity&#10;@Table(name = &quot;clients&quot;, uniqueConstraints = {@UniqueConstraint(columnNames = &quot;email&quot;)})&#10;public class Client {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @NotBlank&#10;    private String username;&#10;&#10;    @Email&#10;    @NotBlank&#10;    private String email;&#10;&#10;    @NotBlank&#10;    private String password; // stored hashed&#10;&#10;    private String phone;&#10;    private String address;&#10;&#10;    // getters and setters&#10;&#10;    public Long getId() {&#10;        return id;&#10;    }&#10;&#10;    public String getUsername() {&#10;        return username;&#10;    }&#10;&#10;    public void setUsername(String username) {&#10;        this.username = username;&#10;    }&#10;&#10;    public void setName(String name) {&#10;        this.name = name;&#10;    }&#10;&#10;    public String getEmail() {&#10;        return email;&#10;    }&#10;&#10;    public void setEmail(String email) {&#10;        this.email = email;&#10;    }&#10;&#10;    public String getPassword() {&#10;        return password;&#10;    }&#10;&#10;    public void setPassword(String password) {&#10;        this.password = password;&#10;    }&#10;&#10;    public String getPhone() {&#10;        return phone;&#10;    }&#10;&#10;    public void setPhone(String phone) {&#10;        this.phone = phone;&#10;    }&#10;&#10;    public String getAddress() {&#10;        return address;&#10;    }&#10;&#10;    public void setAddress(String address) {&#10;        this.address = address;&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.martian.clientms.entity;&#10;&#10;import jakarta.persistence.*;&#10;import jakarta.validation.constraints.Email;&#10;import jakarta.validation.constraints.NotBlank;&#10;&#10;@Entity&#10;@Table(name = &quot;clients&quot;, uniqueConstraints = {@UniqueConstraint(columnNames = &quot;email&quot;)})&#10;public class Client {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @NotBlank&#10;    private String username;&#10;&#10;    @Email&#10;    @NotBlank&#10;    private String email;&#10;&#10;    @NotBlank&#10;    private String password; // stored hashed&#10;&#10;    private String phone;&#10;    private String address;&#10;&#10;    // getters and setters&#10;&#10;    public Long getId() {&#10;        return id;&#10;    }&#10;&#10;    public String getUsername() {&#10;        return username;&#10;    }&#10;&#10;    public void setUsername(String username) {&#10;        this.username = username;&#10;    }&#10;&#10;    public String getEmail() {&#10;        return email;&#10;    }&#10;&#10;    public void setEmail(String email) {&#10;        this.email = email;&#10;    }&#10;&#10;    public String getPassword() {&#10;        return password;&#10;    }&#10;&#10;    public void setPassword(String password) {&#10;        this.password = password;&#10;    }&#10;&#10;    public String getPhone() {&#10;        return phone;&#10;    }&#10;&#10;    public void setPhone(String phone) {&#10;        this.phone = phone;&#10;    }&#10;&#10;    public String getAddress() {&#10;        return address;&#10;    }&#10;&#10;    public void setAddress(String address) {&#10;        this.address = address;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Services/Client/src/main/java/com/martian/clientms/service/ClientService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Services/Client/src/main/java/com/martian/clientms/service/ClientService.java" />
              <option name="originalContent" value="package com.martian.clientms.service;&#10;&#10;import com.martian.clientms.dto.LoginRequest;&#10;import com.martian.clientms.dto.RegisterRequest;&#10;import com.martian.clientms.entity.Client;&#10;import com.martian.clientms.repository.ClientRepository;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;@Service&#10;public class ClientService {&#10;&#10;    private final ClientRepository clientRepository;&#10;    private final BCryptPasswordEncoder passwordEncoder;&#10;&#10;    @Autowired&#10;    public ClientService(ClientRepository clientRepository, BCryptPasswordEncoder passwordEncoder) {&#10;        this.clientRepository = clientRepository;&#10;        this.passwordEncoder = passwordEncoder;&#10;    }&#10;&#10;    public Client register(RegisterRequest req) {&#10;        if (clientRepository.existsByEmail(req.getEmail())) {&#10;            throw new IllegalArgumentException(&quot;Email already in use&quot;);&#10;        }&#10;        Client c = new Client();&#10;        c.setName(req.getName());&#10;        c.setEmail(req.getEmail());&#10;        c.setPassword(passwordEncoder.encode(req.getPassword()));&#10;        c.setPhone(req.getPhone());&#10;        c.setAddress(req.getAddress());&#10;        return clientRepository.save(c);&#10;    }&#10;&#10;    public Client login(LoginRequest req) {&#10;        Optional&lt;Client&gt; oc = clientRepository.findByEmail(req.getEmail());&#10;        if (oc.isEmpty()) throw new IllegalArgumentException(&quot;Invalid credentials&quot;);&#10;        Client c = oc.get();&#10;        if (!passwordEncoder.matches(req.getPassword(), c.getPassword())) {&#10;            throw new IllegalArgumentException(&quot;Invalid credentials&quot;);&#10;        }&#10;        return c; // in real app return token&#10;    }&#10;&#10;    public Client getById(Long id) {&#10;        return clientRepository.findById(id).orElseThrow(() -&gt; new IllegalArgumentException(&quot;Client not found&quot;));&#10;    }&#10;&#10;    public List&lt;Client&gt; getAll() {&#10;        return clientRepository.findAll();&#10;    }&#10;&#10;        if (update.getUsername() != null) existing.setUsername(update.getUsername());&#10;        Client existing = getById(id);&#10;        if (update.getName() != null) existing.setName(update.getName());&#10;        if (update.getEmail() != null &amp;&amp; !update.getEmail().equals(existing.getEmail())) {&#10;            if (clientRepository.existsByEmail(update.getEmail())) {&#10;                throw new IllegalArgumentException(&quot;Email already in use&quot;);&#10;            }&#10;            existing.setEmail(update.getEmail());&#10;        }&#10;        if (update.getPassword() != null &amp;&amp; !update.getPassword().isEmpty()) {&#10;            existing.setPassword(passwordEncoder.encode(update.getPassword()));&#10;        }&#10;        if (update.getPhone() != null) existing.setPhone(update.getPhone());&#10;        if (update.getAddress() != null) existing.setAddress(update.getAddress());&#10;        return clientRepository.save(existing);&#10;    }&#10;&#10;    public void delete(Long id) {&#10;        clientRepository.deleteById(id);&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.martian.clientms.service;&#10;&#10;import com.martian.clientms.dto.LoginRequest;&#10;import com.martian.clientms.dto.RegisterRequest;&#10;import com.martian.clientms.entity.Client;&#10;import com.martian.clientms.repository.ClientRepository;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;@Service&#10;public class ClientService {&#10;&#10;    private final ClientRepository clientRepository;&#10;    private final BCryptPasswordEncoder passwordEncoder;&#10;&#10;    @Autowired&#10;    public ClientService(ClientRepository clientRepository, BCryptPasswordEncoder passwordEncoder) {&#10;        this.clientRepository = clientRepository;&#10;        this.passwordEncoder = passwordEncoder;&#10;    }&#10;&#10;    public Client register(RegisterRequest req) {&#10;        if (clientRepository.existsByEmail(req.getEmail())) {&#10;            throw new IllegalArgumentException(&quot;Email already in use&quot;);&#10;        }&#10;        Client c = new Client();&#10;        c.setName(req.getName());&#10;        c.setEmail(req.getEmail());&#10;        c.setPassword(passwordEncoder.encode(req.getPassword()));&#10;        c.setPhone(req.getPhone());&#10;        c.setAddress(req.getAddress());&#10;        return clientRepository.save(c);&#10;    }&#10;&#10;    public Client login(LoginRequest req) {&#10;        Optional&lt;Client&gt; oc = clientRepository.findByEmail(req.getEmail());&#10;        if (oc.isEmpty()) throw new IllegalArgumentException(&quot;Invalid credentials&quot;);&#10;        Client c = oc.get();&#10;        if (!passwordEncoder.matches(req.getPassword(), c.getPassword())) {&#10;            throw new IllegalArgumentException(&quot;Invalid credentials&quot;);&#10;        }&#10;        return c; // in real app return token&#10;    }&#10;&#10;    public Client getById(Long id) {&#10;        return clientRepository.findById(id).orElseThrow(() -&gt; new IllegalArgumentException(&quot;Client not found&quot;));&#10;    }&#10;&#10;    public List&lt;Client&gt; getAll() {&#10;        return clientRepository.findAll();&#10;    }&#10;&#10;    public Client update(Long id, Client update) {&#10;        Client existing = getById(id);&#10;        if (update.getUsername() != null) existing.setUsername(update.getUsername());&#10;        if (update.getEmail() != null &amp;&amp; !update.getEmail().equals(existing.getEmail())) {&#10;            if (clientRepository.existsByEmail(update.getEmail())) {&#10;                throw new IllegalArgumentException(&quot;Email already in use&quot;);&#10;            }&#10;            existing.setEmail(update.getEmail());&#10;        }&#10;        if (update.getPassword() != null &amp;&amp; !update.getPassword().isEmpty()) {&#10;            existing.setPassword(passwordEncoder.encode(update.getPassword()));&#10;        }&#10;        return clientRepository.save(existing);&#10;    }&#10;&#10;    public void delete(Long id) {&#10;        clientRepository.deleteById(id);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>